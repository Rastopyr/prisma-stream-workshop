// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWishlist {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWishlist(data: WishlistCreateInput!): Wishlist!
  updateWishlist(data: WishlistUpdateInput!, where: WishlistWhereUniqueInput!): Wishlist
  updateManyWishlists(data: WishlistUpdateManyMutationInput!, where: WishlistWhereInput): BatchPayload!
  upsertWishlist(where: WishlistWhereUniqueInput!, create: WishlistCreateInput!, update: WishlistUpdateInput!): Wishlist!
  deleteWishlist(where: WishlistWhereUniqueInput!): Wishlist
  deleteManyWishlists(where: WishlistWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String!
  description: String
  url: String
  price: Float!
  discont: Float!
  wishlist: Wishlist!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  description: String
  url: String
  price: Float
  discont: Float
  wishlist: WishlistCreateOneWithoutProductsInput!
}

input ProductCreateManyWithoutWishlistInput {
  create: [ProductCreateWithoutWishlistInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutWishlistInput {
  id: ID
  name: String!
  description: String
  url: String
  price: Float
  discont: Float
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  price_ASC
  price_DESC
  discont_ASC
  discont_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  description: String
  url: String
  price: Float!
  discont: Float!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  discont: Float
  discont_not: Float
  discont_in: [Float!]
  discont_not_in: [Float!]
  discont_lt: Float
  discont_lte: Float
  discont_gt: Float
  discont_gte: Float
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  description: String
  url: String
  price: Float
  discont: Float
  wishlist: WishlistUpdateOneRequiredWithoutProductsInput
}

input ProductUpdateManyDataInput {
  name: String
  description: String
  url: String
  price: Float
  discont: Float
}

input ProductUpdateManyMutationInput {
  name: String
  description: String
  url: String
  price: Float
  discont: Float
}

input ProductUpdateManyWithoutWishlistInput {
  create: [ProductCreateWithoutWishlistInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutWishlistInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutWishlistInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutWishlistDataInput {
  name: String
  description: String
  url: String
  price: Float
  discont: Float
}

input ProductUpdateWithWhereUniqueWithoutWishlistInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutWishlistDataInput!
}

input ProductUpsertWithWhereUniqueWithoutWishlistInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutWishlistDataInput!
  create: ProductCreateWithoutWishlistInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  discont: Float
  discont_not: Float
  discont_in: [Float!]
  discont_not_in: [Float!]
  discont_lt: Float
  discont_lte: Float
  discont_gt: Float
  discont_gte: Float
  wishlist: WishlistWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  wishlist(where: WishlistWhereUniqueInput!): Wishlist
  wishlists(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wishlist]!
  wishlistsConnection(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WishlistConnection!
  node(id: ID!): Node
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  wishlist(where: WishlistSubscriptionWhereInput): WishlistSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  role: UserRole!
  wishlists(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wishlist!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  role: UserRole!
  wishlists: WishlistCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutWishlistsInput {
  create: UserCreateWithoutWishlistsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWishlistsInput {
  id: ID
  email: String!
  role: UserRole!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  role: UserRole!
}

enum UserRole {
  ADMIN
  USER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  role: UserRole
  wishlists: WishlistUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  email: String
  role: UserRole
}

input UserUpdateOneRequiredWithoutWishlistsInput {
  create: UserCreateWithoutWishlistsInput
  update: UserUpdateWithoutWishlistsDataInput
  upsert: UserUpsertWithoutWishlistsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutWishlistsDataInput {
  email: String
  role: UserRole
}

input UserUpsertWithoutWishlistsInput {
  update: UserUpdateWithoutWishlistsDataInput!
  create: UserCreateWithoutWishlistsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  wishlists_every: WishlistWhereInput
  wishlists_some: WishlistWhereInput
  wishlists_none: WishlistWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Wishlist {
  id: ID!
  name: String!
  isPrivate: Boolean!
  owner: User!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  tags: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WishlistConnection {
  pageInfo: PageInfo!
  edges: [WishlistEdge]!
  aggregate: AggregateWishlist!
}

input WishlistCreateInput {
  id: ID
  name: String!
  isPrivate: Boolean!
  owner: UserCreateOneWithoutWishlistsInput!
  products: ProductCreateManyWithoutWishlistInput
  tags: WishlistCreatetagsInput
}

input WishlistCreateManyWithoutOwnerInput {
  create: [WishlistCreateWithoutOwnerInput!]
  connect: [WishlistWhereUniqueInput!]
}

input WishlistCreateOneWithoutProductsInput {
  create: WishlistCreateWithoutProductsInput
  connect: WishlistWhereUniqueInput
}

input WishlistCreatetagsInput {
  set: [String!]
}

input WishlistCreateWithoutOwnerInput {
  id: ID
  name: String!
  isPrivate: Boolean!
  products: ProductCreateManyWithoutWishlistInput
  tags: WishlistCreatetagsInput
}

input WishlistCreateWithoutProductsInput {
  id: ID
  name: String!
  isPrivate: Boolean!
  owner: UserCreateOneWithoutWishlistsInput!
  tags: WishlistCreatetagsInput
}

type WishlistEdge {
  node: Wishlist!
  cursor: String!
}

enum WishlistOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isPrivate_ASC
  isPrivate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WishlistPreviousValues {
  id: ID!
  name: String!
  isPrivate: Boolean!
  tags: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WishlistScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPrivate: Boolean
  isPrivate_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WishlistScalarWhereInput!]
  OR: [WishlistScalarWhereInput!]
  NOT: [WishlistScalarWhereInput!]
}

type WishlistSubscriptionPayload {
  mutation: MutationType!
  node: Wishlist
  updatedFields: [String!]
  previousValues: WishlistPreviousValues
}

input WishlistSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WishlistWhereInput
  AND: [WishlistSubscriptionWhereInput!]
  OR: [WishlistSubscriptionWhereInput!]
  NOT: [WishlistSubscriptionWhereInput!]
}

input WishlistUpdateInput {
  name: String
  isPrivate: Boolean
  owner: UserUpdateOneRequiredWithoutWishlistsInput
  products: ProductUpdateManyWithoutWishlistInput
  tags: WishlistUpdatetagsInput
}

input WishlistUpdateManyDataInput {
  name: String
  isPrivate: Boolean
  tags: WishlistUpdatetagsInput
}

input WishlistUpdateManyMutationInput {
  name: String
  isPrivate: Boolean
  tags: WishlistUpdatetagsInput
}

input WishlistUpdateManyWithoutOwnerInput {
  create: [WishlistCreateWithoutOwnerInput!]
  delete: [WishlistWhereUniqueInput!]
  connect: [WishlistWhereUniqueInput!]
  set: [WishlistWhereUniqueInput!]
  disconnect: [WishlistWhereUniqueInput!]
  update: [WishlistUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [WishlistUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [WishlistScalarWhereInput!]
  updateMany: [WishlistUpdateManyWithWhereNestedInput!]
}

input WishlistUpdateManyWithWhereNestedInput {
  where: WishlistScalarWhereInput!
  data: WishlistUpdateManyDataInput!
}

input WishlistUpdateOneRequiredWithoutProductsInput {
  create: WishlistCreateWithoutProductsInput
  update: WishlistUpdateWithoutProductsDataInput
  upsert: WishlistUpsertWithoutProductsInput
  connect: WishlistWhereUniqueInput
}

input WishlistUpdatetagsInput {
  set: [String!]
}

input WishlistUpdateWithoutOwnerDataInput {
  name: String
  isPrivate: Boolean
  products: ProductUpdateManyWithoutWishlistInput
  tags: WishlistUpdatetagsInput
}

input WishlistUpdateWithoutProductsDataInput {
  name: String
  isPrivate: Boolean
  owner: UserUpdateOneRequiredWithoutWishlistsInput
  tags: WishlistUpdatetagsInput
}

input WishlistUpdateWithWhereUniqueWithoutOwnerInput {
  where: WishlistWhereUniqueInput!
  data: WishlistUpdateWithoutOwnerDataInput!
}

input WishlistUpsertWithoutProductsInput {
  update: WishlistUpdateWithoutProductsDataInput!
  create: WishlistCreateWithoutProductsInput!
}

input WishlistUpsertWithWhereUniqueWithoutOwnerInput {
  where: WishlistWhereUniqueInput!
  update: WishlistUpdateWithoutOwnerDataInput!
  create: WishlistCreateWithoutOwnerInput!
}

input WishlistWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPrivate: Boolean
  isPrivate_not: Boolean
  owner: UserWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WishlistWhereInput!]
  OR: [WishlistWhereInput!]
  NOT: [WishlistWhereInput!]
}

input WishlistWhereUniqueInput {
  id: ID
}
`