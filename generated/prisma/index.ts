// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  wishlist: (where?: WishlistWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  wishlist: (where: WishlistWhereUniqueInput) => WishlistNullablePromise;
  wishlists: (args?: {
    where?: WishlistWhereInput;
    orderBy?: WishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Wishlist>;
  wishlistsConnection: (args?: {
    where?: WishlistWhereInput;
    orderBy?: WishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WishlistConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWishlist: (data: WishlistCreateInput) => WishlistPromise;
  updateWishlist: (args: {
    data: WishlistUpdateInput;
    where: WishlistWhereUniqueInput;
  }) => WishlistPromise;
  updateManyWishlists: (args: {
    data: WishlistUpdateManyMutationInput;
    where?: WishlistWhereInput;
  }) => BatchPayloadPromise;
  upsertWishlist: (args: {
    where: WishlistWhereUniqueInput;
    create: WishlistCreateInput;
    update: WishlistUpdateInput;
  }) => WishlistPromise;
  deleteWishlist: (where: WishlistWhereUniqueInput) => WishlistPromise;
  deleteManyWishlists: (where?: WishlistWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  wishlist: (
    where?: WishlistSubscriptionWhereInput
  ) => WishlistSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "ADMIN" | "USER";

export type WishlistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC"
  | "price_ASC"
  | "price_DESC"
  | "discont_ASC"
  | "discont_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutWishlistsDataInput {
  email?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface WishlistCreateOneWithoutProductsInput {
  create?: Maybe<WishlistCreateWithoutProductsInput>;
  connect?: Maybe<WishlistWhereUniqueInput>;
}

export interface WishlistUpdateWithWhereUniqueWithoutOwnerInput {
  where: WishlistWhereUniqueInput;
  data: WishlistUpdateWithoutOwnerDataInput;
}

export interface WishlistCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  isPrivate: Boolean;
  owner: UserCreateOneWithoutWishlistsInput;
  tags?: Maybe<WishlistCreatetagsInput>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
}

export interface UserCreateOneWithoutWishlistsInput {
  create?: Maybe<UserCreateWithoutWishlistsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  wishlists_every?: Maybe<WishlistWhereInput>;
  wishlists_some?: Maybe<WishlistWhereInput>;
  wishlists_none?: Maybe<WishlistWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateWithoutWishlistsInput {
  id?: Maybe<ID_Input>;
  email: String;
  role: UserRole;
}

export interface WishlistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WishlistWhereInput>;
  AND?: Maybe<
    WishlistSubscriptionWhereInput[] | WishlistSubscriptionWhereInput
  >;
  OR?: Maybe<WishlistSubscriptionWhereInput[] | WishlistSubscriptionWhereInput>;
  NOT?: Maybe<
    WishlistSubscriptionWhereInput[] | WishlistSubscriptionWhereInput
  >;
}

export interface WishlistCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
  wishlist?: Maybe<WishlistUpdateOneRequiredWithoutProductsInput>;
}

export interface WishlistUpdateInput {
  name?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  owner?: Maybe<UserUpdateOneRequiredWithoutWishlistsInput>;
  products?: Maybe<ProductUpdateManyWithoutWishlistInput>;
  tags?: Maybe<WishlistUpdatetagsInput>;
}

export interface WishlistUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<WishlistCreateWithoutProductsInput>;
  update?: Maybe<WishlistUpdateWithoutProductsDataInput>;
  upsert?: Maybe<WishlistUpsertWithoutProductsInput>;
  connect?: Maybe<WishlistWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface WishlistUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  owner?: Maybe<UserUpdateOneRequiredWithoutWishlistsInput>;
  tags?: Maybe<WishlistUpdatetagsInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateOneRequiredWithoutWishlistsInput {
  create?: Maybe<UserCreateWithoutWishlistsInput>;
  update?: Maybe<UserUpdateWithoutWishlistsDataInput>;
  upsert?: Maybe<UserUpsertWithoutWishlistsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface WishlistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WishlistScalarWhereInput[] | WishlistScalarWhereInput>;
  OR?: Maybe<WishlistScalarWhereInput[] | WishlistScalarWhereInput>;
  NOT?: Maybe<WishlistScalarWhereInput[] | WishlistScalarWhereInput>;
}

export interface ProductUpdateWithoutWishlistDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
}

export interface UserUpsertWithoutWishlistsInput {
  update: UserUpdateWithoutWishlistsDataInput;
  create: UserCreateWithoutWishlistsInput;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface WishlistUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface ProductUpsertWithWhereUniqueWithoutWishlistInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutWishlistDataInput;
  create: ProductCreateWithoutWishlistInput;
}

export interface WishlistUpsertWithoutProductsInput {
  update: WishlistUpdateWithoutProductsDataInput;
  create: WishlistCreateWithoutProductsInput;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
  wishlist: WishlistCreateOneWithoutProductsInput;
}

export interface ProductUpdateWithWhereUniqueWithoutWishlistInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutWishlistDataInput;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  discont?: Maybe<Float>;
  discont_not?: Maybe<Float>;
  discont_in?: Maybe<Float[] | Float>;
  discont_not_in?: Maybe<Float[] | Float>;
  discont_lt?: Maybe<Float>;
  discont_lte?: Maybe<Float>;
  discont_gt?: Maybe<Float>;
  discont_gte?: Maybe<Float>;
  wishlist?: Maybe<WishlistWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProductUpdateManyWithoutWishlistInput {
  create?: Maybe<
    ProductCreateWithoutWishlistInput[] | ProductCreateWithoutWishlistInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutWishlistInput[]
    | ProductUpdateWithWhereUniqueWithoutWishlistInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutWishlistInput[]
    | ProductUpsertWithWhereUniqueWithoutWishlistInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface WishlistUpdateManyMutationInput {
  name?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  tags?: Maybe<WishlistUpdatetagsInput>;
}

export interface WishlistUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  products?: Maybe<ProductUpdateManyWithoutWishlistInput>;
  tags?: Maybe<WishlistUpdatetagsInput>;
}

export interface WishlistUpdateManyDataInput {
  name?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  tags?: Maybe<WishlistUpdatetagsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  role: UserRole;
  wishlists?: Maybe<WishlistCreateManyWithoutOwnerInput>;
}

export interface WishlistUpsertWithWhereUniqueWithoutOwnerInput {
  where: WishlistWhereUniqueInput;
  update: WishlistUpdateWithoutOwnerDataInput;
  create: WishlistCreateWithoutOwnerInput;
}

export interface WishlistCreateManyWithoutOwnerInput {
  create?: Maybe<
    WishlistCreateWithoutOwnerInput[] | WishlistCreateWithoutOwnerInput
  >;
  connect?: Maybe<WishlistWhereUniqueInput[] | WishlistWhereUniqueInput>;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  discont?: Maybe<Float>;
  discont_not?: Maybe<Float>;
  discont_in?: Maybe<Float[] | Float>;
  discont_not_in?: Maybe<Float[] | Float>;
  discont_lt?: Maybe<Float>;
  discont_lte?: Maybe<Float>;
  discont_gt?: Maybe<Float>;
  discont_gte?: Maybe<Float>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface WishlistCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  isPrivate: Boolean;
  products?: Maybe<ProductCreateManyWithoutWishlistInput>;
  tags?: Maybe<WishlistCreatetagsInput>;
}

export interface WishlistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  owner?: Maybe<UserWhereInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WishlistWhereInput[] | WishlistWhereInput>;
  OR?: Maybe<WishlistWhereInput[] | WishlistWhereInput>;
  NOT?: Maybe<WishlistWhereInput[] | WishlistWhereInput>;
}

export interface WishlistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  isPrivate: Boolean;
  owner: UserCreateOneWithoutWishlistsInput;
  products?: Maybe<ProductCreateManyWithoutWishlistInput>;
  tags?: Maybe<WishlistCreatetagsInput>;
}

export interface WishlistUpdateManyWithoutOwnerInput {
  create?: Maybe<
    WishlistCreateWithoutOwnerInput[] | WishlistCreateWithoutOwnerInput
  >;
  delete?: Maybe<WishlistWhereUniqueInput[] | WishlistWhereUniqueInput>;
  connect?: Maybe<WishlistWhereUniqueInput[] | WishlistWhereUniqueInput>;
  set?: Maybe<WishlistWhereUniqueInput[] | WishlistWhereUniqueInput>;
  disconnect?: Maybe<WishlistWhereUniqueInput[] | WishlistWhereUniqueInput>;
  update?: Maybe<
    | WishlistUpdateWithWhereUniqueWithoutOwnerInput[]
    | WishlistUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | WishlistUpsertWithWhereUniqueWithoutOwnerInput[]
    | WishlistUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<WishlistScalarWhereInput[] | WishlistScalarWhereInput>;
  updateMany?: Maybe<
    | WishlistUpdateManyWithWhereNestedInput[]
    | WishlistUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  role?: Maybe<UserRole>;
  wishlists?: Maybe<WishlistUpdateManyWithoutOwnerInput>;
}

export interface ProductCreateWithoutWishlistInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  url?: Maybe<String>;
  price?: Maybe<Float>;
  discont?: Maybe<Float>;
}

export interface ProductCreateManyWithoutWishlistInput {
  create?: Maybe<
    ProductCreateWithoutWishlistInput[] | ProductCreateWithoutWishlistInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface WishlistUpdateManyWithWhereNestedInput {
  where: WishlistScalarWhereInput;
  data: WishlistUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type WishlistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface WishlistPreviousValues {
  id: ID_Output;
  name: String;
  isPrivate: Boolean;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WishlistPreviousValuesPromise
  extends Promise<WishlistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
  tags: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WishlistPreviousValuesSubscription
  extends Promise<AsyncIterator<WishlistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  role: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  role: () => Promise<UserRole>;
  wishlists: <T = FragmentableArray<Wishlist>>(args?: {
    where?: WishlistWhereInput;
    orderBy?: WishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  wishlists: <T = Promise<AsyncIterator<WishlistSubscription>>>(args?: {
    where?: WishlistWhereInput;
    orderBy?: WishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  role: () => Promise<UserRole>;
  wishlists: <T = FragmentableArray<Wishlist>>(args?: {
    where?: WishlistWhereInput;
    orderBy?: WishlistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  url?: String;
  price: Float;
  discont: Float;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  discont: () => Promise<Float>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  discont: () => Promise<AsyncIterator<Float>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WishlistEdge {
  node: Wishlist;
  cursor: String;
}

export interface WishlistEdgePromise
  extends Promise<WishlistEdge>,
    Fragmentable {
  node: <T = WishlistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WishlistEdgeSubscription
  extends Promise<AsyncIterator<WishlistEdge>>,
    Fragmentable {
  node: <T = WishlistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  role: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface Product {
  id: ID_Output;
  name: String;
  description?: String;
  url?: String;
  price: Float;
  discont: Float;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  discont: () => Promise<Float>;
  wishlist: <T = WishlistPromise>() => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  discont: () => Promise<AsyncIterator<Float>>;
  wishlist: <T = WishlistSubscription>() => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  price: () => Promise<Float>;
  discont: () => Promise<Float>;
  wishlist: <T = WishlistPromise>() => T;
}

export interface Wishlist {
  id: ID_Output;
  name: String;
  isPrivate: Boolean;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WishlistPromise extends Promise<Wishlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
  owner: <T = UserPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WishlistSubscription
  extends Promise<AsyncIterator<Wishlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  owner: <T = UserSubscription>() => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WishlistNullablePromise
  extends Promise<Wishlist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
  owner: <T = UserPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface WishlistSubscriptionPayload {
  mutation: MutationType;
  node: Wishlist;
  updatedFields: String[];
  previousValues: WishlistPreviousValues;
}

export interface WishlistSubscriptionPayloadPromise
  extends Promise<WishlistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WishlistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WishlistPreviousValuesPromise>() => T;
}

export interface WishlistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WishlistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WishlistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WishlistPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WishlistConnection {
  pageInfo: PageInfo;
  edges: WishlistEdge[];
}

export interface WishlistConnectionPromise
  extends Promise<WishlistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WishlistEdge>>() => T;
  aggregate: <T = AggregateWishlistPromise>() => T;
}

export interface WishlistConnectionSubscription
  extends Promise<AsyncIterator<WishlistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WishlistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWishlistSubscription>() => T;
}

export interface AggregateWishlist {
  count: Int;
}

export interface AggregateWishlistPromise
  extends Promise<AggregateWishlist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWishlistSubscription
  extends Promise<AsyncIterator<AggregateWishlist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Wishlist",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `secret1`
});
export const prisma = new Prisma();
